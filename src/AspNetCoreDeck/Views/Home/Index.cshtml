<div class="reveal">
    <div class="slides">
        <section>
            <h3>Building Highly Scalable Web Apps using</h3>
            <h1>ASP.NET Core 1.0</h1>
            <div class="fragment">
                <p>formerly known as</p>
                <h3>ASP.NET 5</h3>
                <p>ASP.NET vNext</p>
                <blockquote class="fragment">"Naming is hard" - Scott Hanselman</blockquote>
            </div>

        </section>

        <section>
            <h2>Performance</h2>
            <h3 class="fragment">ASP.NET 4.6: 50,000 Requests per second</h3>
            <h3 class="fragment">ASP.NET Core: 1.15 million requests per second (2,300% faster)</h3>
            <img class="fragment" src="~/images/Cbdk7yqUYAATu1N.jpg" />
        </section>

        <section>
            <section>
                <h1>Stack Evolution</h1>
            </section>
            <section>
                <h1>ASP.NET 4.5</h1>
                <img src="images/45stack.png" alt="Old stack" />
            </section>
            <section>
                <h1>ASP.NET Core</h1>
                <img src="images/core-stack1.png" alt="Core stack" />
            </section>
            <section>
                <h1>ASP.NET Core</h1>
                <p>Technologies</p>
                <img src="images/core-stack2.png" alt="Core stack with technologies" />
            </section>
        </section>

        <section>
            <h1>Roadmap</h1>
            <p>Currently RC1</p>
            <p>
                <a href="https://github.com/aspnet/Home/wiki/Roadmap">https://github.com/aspnet/Home/wiki/Roadmap</a>
            </p>
        </section>
        <section>
            <h2>Goals</h2>
            <ul>
                <li>Build and run cross-platform ASP.NET apps</li>
                <li>New Tools for Modern Web Dev</li>
                <li>Single stack for Web UI and Web API</li>
                <li>Cloud Ready out of the box</li>
                <li>Built-in support for create NuGet Pkgs</li>
                <li>Built-in DI</li>
                <li>IIS or self-host</li>
            </ul>
        </section>

        <section>
            <h2>New Integrations</h2>
            <p>ASP.NET Core projects rely on:</p>
            <ul>
                <li>Node.js</li>
                <li>npm</li>
                <li>Gulp (or Grunt)</li>
                <li>bower</li>
            </ul>
        </section>

        <section>
            <section>
                <h1>Tag Helpers</h1>
                <pre>
                <code class="razor" data-trim>
&#64;Html.ActionLink("Add a Movie", "Add", "Movie")
</code>
                </pre>
                <p>now becomes</p>
                <pre>
                <code class="html" data-trim>
&lt;a asp-action="Add" asp-controller="Movie"&gt;Add a Movie&lt;/a&gt;
</code>
                </pre>
                <p>Forms look like html forms again, but now with intellisense!</p>
            </section>
            <section>
                <h1>Environment Tag Helper</h1>
                <pre>
                <code class="html" data-trim>
&lt;environment names="Development"&gt;
...
&lt;/environment&gt;
&lt;environment names="Staging,Production"&gt;
...
&lt;/environment&gt;
</code>
                </pre>
                <p>ASP.NET Core references an environment variable, ASPNET_ENV and renders the corresponding section (Development, Staging, Production)</p>
            </section>
        </section>

        <section>
            <section>
                <h2>Build Runner</h2>
                <p>Using Task Runner Explorer and Gulp, we can</p>
                <ul>
                    <li>Watch and Build SASS/LESS Files</li>
                    <li>Watch and Build TypeScript Files</li>
                    <li>Optimize Images</li>
                    <li>Concat/Minify CSS</li>
                    <li>Concat/Minify JS</li>
                    <li>
                        Do pretty much anything we want in response to:
                        <ul>
                            <li>Project Open</li>
                            <li>Before Build</li>
                            <li>After Build</li>
                            <li>Clean</li>
                        </ul>
                    </li>
                </ul>
                <aside class="notes">
                    Couldn't we already do this with MSBuild and Visual Studio? Well, for the most part yes -
                    but using Gulp allows us to make our web projects more portable between operating systems
                    and Editors. Additionally, it de-couples build steps from running our web app, which has a
                    number of benefits.
                </aside>
            </section>
            <section>
                <h2>Gulpfile.js</h2>
                <pre>
                <code class="javascript" data-trim>/// <binding Clean='clean' />
"use strict";
var gulp = require("gulp"),
    rimraf = require("rimraf"),
    concat = require("gulp-concat"),
    cssmin = require("gulp-cssmin"),
    uglify = require("gulp-uglify");
var paths = {
    webroot: "./wwwroot/"
};
paths.js = paths.webroot + "js/**/*.js";
paths.minJs = paths.webroot + "js/**/*.min.js";
paths.css = paths.webroot + "css/**/*.css";
paths.minCss = paths.webroot + "css/**/*.min.css";
paths.concatJsDest = paths.webroot + "js/site.min.js";
paths.concatCssDest = paths.webroot + "css/site.min.css";
gulp.task("clean:js", function (cb) {
    rimraf(paths.concatJsDest, cb);
});
gulp.task("clean:css", function (cb) {
    rimraf(paths.concatCssDest, cb);
});
gulp.task("clean", ["clean:js", "clean:css"]);
gulp.task("min:js", function () {
    return gulp.src([paths.js, "!" + paths.minJs], { base: "." })
        .pipe(concat(paths.concatJsDest))
        .pipe(uglify())
        .pipe(gulp.dest("."));
});
gulp.task("min:css", function () {
    return gulp.src([paths.css, "!" + paths.minCss])
        .pipe(concat(paths.concatCssDest))
        .pipe(cssmin())
        .pipe(gulp.dest("."));
});
gulp.task("min", ["min:js", "min:css"]);
</code>
                </pre>
            </section>
        </section>

        <section>
            <section>
                <h1>Config Management</h1>
            </section>
            <section>
                <h2>Config</h2>
                <p>web.config and transforms replaced by appsettings.json</p>
                <pre><code class="json">{
  "Data": {
    "DefaultConnection": {
      "ConnectionString": "Server=(localdb)\\mssqllocaldb;Database=aspnet5-db;Trusted_Connection=True;"
    }
  },
  "ApplicationInsights": {
    "InstrumentationKey": "edde8e81-f25e-4790-9ca4-820b148b9f3d"
  },
  "Logging": {
    "IncludeScopes": false,
    "LogLevel": {
      "Default": "Verbose",
      "System": "Information",
      "Microsoft": "Information"
    }
  }
}</code></pre>
            </section>
            <section>
                <p>Startup.cs defines how config is processed</p>
                <pre><code class="csharp" data-trim>
public Startup(IHostingEnvironment env)
{
    // Set up configuration sources.
    var builder = new ConfigurationBuilder()
        .AddJsonFile("appsettings.json")
        .AddEnvironmentVariables(); //Environment Variables override settings in appsettings.json
    if (env.IsDevelopment())
    {
        // This will push telemetry data through Application Insights pipeline faster, allowing you to view results immediately.
        builder.AddApplicationInsightsSettings(developerMode: true);
    }
    Configuration = builder.Build();
}
</code></pre>
                <p>Environment variable overrides make Cloud Config much easier</p>
            </section>
            <section>
                <h2>Dependency Injection</h2>
                <p>New built-in abstraction and default provider</p>
                <dl>
                    <dt>Transient</dt>
                    <dd class="fragment">Created each time they are requested.</dd>

                    <dt>Scoped</dt>
                    <dd class="fragment">Created once per request. Good for a DbContext.</dd>

                    <dt>Singleton</dt>
                    <dd class="fragment">Created the first time they are requested, every subsequent request uses the same instance. </dd>

                    <dt>Instance</dt>
                    <dd class="fragment">Add an instance directly to the services container. This instance will be used for all subsequent requests (this will create a Singleton-scoped instance).</dd>
                </dl>
                <aside class="notes">One key difference between Instance services and Singleton services is that the Instance service is created in ConfigureServices, while the Singleton service is lazy-loaded the first time it is requested.</aside>
            </section>
            <section>
                <h2>Dependency Injection</h2>
                <p>Configured from Startup.cs ConfigureServices() method</p>
                <pre><code class="csharp" data-trim>
public void ConfigureServices(IServiceCollection services)
{
    services.AddScoped&lt;IUserService, UserService&gt;();
    //services.AddTransient&lt;IUserService, UserService&gt;();
    //services.AddSingleton&lt;IUserService, UserService&gt;();
    //services.AddInstance(new UserService());
}
</code></pre>
                <p>Can then be used elsewhere in the app</p>
                <pre><code class="csharp" data-trim>
private readonly IUserService _userService;
public HomeController(IUserService userService)
{
    _userService = userService;
}
</code></pre>
                <p>You can swap out the DI provider for Unity, Autofac, etc and keep the same syntax.</p>
            </section>
        </section>
        <section>
            <h1>Let's make something!</h1>
            <p>Get VS 2015 Community free at <a href="visualstudio.com/free">visualstudio.com/free</a></p>
        </section>
        <section>
            <h1>Deploy to Azure</h1>
            <p>You can do this continuously be connecting your Azure Web App to your Git repo as well</p>
        </section>
        <section>
            <section>
                <h1>Does it really work in Linux now?</h1>
            </section>
            <section>
                <pre><code class="bash" data-trim>
sudo apt-get install unzip curl git make automake libtool 
curl -sSL https://raw.githubusercontent.com/aspnet/Home/dev/dnvminstall.sh | DNX_BRANCH=dev sh && source ~/.dnx/dnvm/dnvm.sh
sudo apt-get install libunwind8 gettext libssl-dev libcurl4-openssl-dev zlib1g libicu-dev uuid-dev
dnvm upgrade -r coreclr
curl -sSL https://github.com/libuv/libuv/archive/v1.8.0.tar.gz | sudo tar zxfv - -C /usr/local/src
cd /usr/local/src/libuv-1.8.0
sudo sh autogen.sh
sudo ./configure
sudo make
sudo make install
sudo rm -rf /usr/local/src/libuv-1.8.0 && cd ~/
sudo ldconfig
git clone https://github.com/brett-mlevel/Demo1.git
cd Demo1
dnu restore
dnx web
                    </code></pre>
            </section>
            <section ng-app="app" ng-controller="TodoController as todo">
                <h2>Mini TODO App</h2>
                <input type="text" ng-model="todo.newItem" /> <button ng-click="todo.addItem()">Add</button>
                <br />
                <ul>
                    <li ng-repeat="(key, value) in todo.items">{{value}} <button ng-click="todo.removeItem(key);">Delete</button></li>
                </ul>
            </section>
        </section>

    </div>
</div>